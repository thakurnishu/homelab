- name: Ensure net.ipv4.ip_forward is enabled permanently
  hosts: localhost
  become: true
  tasks:
    - name: Enable
      sysctl:
        name: net.ipv4.ip_forward
        value: 1
        state: present
        reload: yes

- name: Install Containerd
  hosts: localhost
  become: true
  tasks:
    - name: Download containerd tarball
      get_url:
        url: https://github.com/containerd/containerd/releases/download/v{{ containerd_version }}/containerd-{{ containerd_version }}-linux-amd64.tar.gz
        dest: /tmp/containerd-{{ containerd_version }}-linux-amd64.tar.gz
        mode: '0644'
    - name: Extract containerd tarball to /usr/local
      unarchive:
        src: /tmp/containerd-{{ containerd_version }}-linux-amd64.tar.gz
        dest: /usr/local/
        remote_src: yes
        extra_opts: [--strip-components=1]   # optional: if you want to strip top folder
    - name: Create systemd system directory
      file:
        path: /usr/local/lib/systemd/system
        state: directory
        mode: '0755'
    - name: Create containerd config directory
      file:
        path: /etc/containerd
        state: directory
        mode: '0755'
    - name: Copy containerd service file
      copy:
        src: utils/containerd/containerd.service
        dest: /usr/local/lib/systemd/system/containerd.service
        mode: '0644'
    - name: Copy containerd config file
      copy:
        src: utils/containerd/config.toml
        dest: /etc/containerd/config.toml
        mode: '0644'
    - name: Reload systemd manager configuration
      command: systemctl daemon-reload
      become: true
    - name: Enable and start containerd service
      systemd:
        name: containerd
        enabled: yes
        state: restarted
      become: true

- name: Install Runc
  hosts: localhost
  become: true
  tasks:
    - name: Download Runc
      get_url:
        url: https://github.com/opencontainers/runc/releases/download/v{{ runc_version }}/runc.amd64
        dest: /tmp/runc.amd64
        mode: '0644'
    - name: Ensure /usr/local/sbin exists
      file:
        path: /usr/local/sbin
        state: directory
        mode: '0755'
        recurse: yes
    - name: Install runc binary from /tmp
      copy:
        src: /tmp/runc.amd64
        dest: /usr/local/sbin/runc
        remote_src: yes
        mode: '0755'
        owner: root
        group: root

- name: Install CNI Plugin
  hosts: localhost
  become: true
  tasks:
    - name: Ensure /opt/cni/bin exists
      file:
        path: /opt/cni/bin
        state: directory
        mode: '0755'
        recurse: yes
    - name: Download cni tarball
      get_url:
        url: https://github.com/containernetworking/plugins/releases/download/v{{ cni_plugin_version }}/cni-plugins-linux-amd64-v{{ cni_plugin_version }}.tgz
        dest: /tmp/cni-plugins-linux-amd64-v{{ cni_plugin_version }}.tgz
        mode: '0644'
    - name: Extract containerd tarball to /usr/local
      unarchive:
        src: /tmp/cni-plugins-linux-amd64-v{{ cni_plugin_version }}.tgz
        dest: /opt/cni/bin/
        remote_src: yes
        extra_opts: [--strip-components=1]   # optional: if you want to strip top folder

- name: Install FluxCD
  hosts: localhost
  become: true
  tasks:
    - name: Download FluxCD install script
      get_url:
        url: https://fluxcd.io/install.sh
        dest: /tmp/fluxcd-install.sh
        mode: '0755'
    - name: Execute FluxCD install script
      command: bash /tmp/fluxcd-install.sh

- name: Install K8S Tools
  hosts: localhost
  become: true
  tasks:
    - name: Ensure apt keyring directory exists
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'
    - name: Download and install Kubernetes APT key
      shell: |
        curl -fsSL https://pkgs.k8s.io/core:/stable:/v{{ k8s_version }}/deb/Release.key | \
        gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      args:
        creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    - name: Add Kubernetes APT repository
      copy:
        dest: /etc/apt/sources.list.d/kubernetes.list
        content: |
          deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v{{ k8s_version }}/deb/ /
        mode: '0644'
    - name: Update apt cache
      apt:
        update_cache: yes
    - name: Unhold kubelet, kubeadm, kubectl if previously held
      shell: apt-mark unhold kubelet kubeadm kubectl || true
    - name: Install specific version of Kubernetes tools
      apt:
        name:
          - "kubelet={{ kube_version }}"
          - "kubeadm={{ kube_version }}"
          - "kubectl={{ kube_version }}"
        allow_downgrade: yes
        state: present
    - name: Hold kubelet, kubeadm, kubectl at current version
      shell: apt-mark hold kubelet kubeadm kubectl

- name: Setup K8S Cluster using Kubeadm
  hosts: localhost
  become: true
  tasks:
    - name: Copy kubeadm config file
      copy:
        src: utils/kubeadm/kubeadm-config.yaml
        dest: /tmp/kubeadm-config.yaml
        mode: '0644'
    - name: Initialize Kubernetes cluster with kubeadm
      command: kubeadm init --config=/tmp/kubeadm-config.yaml
    - name: Ensure .kube directory exists
      file:
        path: /home/{{ ansible_user }}/.kube
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'
    - name: Copy admin.conf to user's kube config
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/{{ ansible_user }}/.kube/config
        remote_src: yes
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0644'
    - name: Install Calico Tigera operator
      command: kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v{{ calico_version }}/manifests/tigera-operator.yaml
    - name: Install Calico Tigera Custom Resources
      command: kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v{{ calico_version }}/manifests/custom-resources.yaml
    - name: Get control plane node name
      command: kubectl get nodes --selector='node-role.kubernetes.io/control-plane' -o jsonpath='{.items[0].metadata.name}'
      register: control_plane_node
      changed_when: false
    - name: Untaint control plane node to allow scheduling pods
      command: kubectl taint node {{ control_plane_node.stdout }} node-role.kubernetes.io/control-plane:NoSchedule-
      args:
        warn: false
      register: untaint_result
      changed_when: "'tainted' not in untaint_result.stdout and 'not found' not in untaint_result.stderr"
